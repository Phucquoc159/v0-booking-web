// this file is auto-generated by codegen
// do not modify it directly
import { DichVu } from '@/lib/generated/prisma'

const API_URL = 'http://localhost:3000/api/dich-vu'

export interface ApiResponse<T> {
  success: boolean
  data?: T
  message?: string
  error?: string
}

// Get list of DichVu
export async function getListDichVu(): Promise<ApiResponse<DichVu[]>> {
  try {
    const response = await fetch(API_URL)
    return await response.json()
  } catch (error) {
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error',
    }
  }
}

// Get DichVu by idDv
export async function getDichVu(id: string): Promise<ApiResponse<DichVu>> {
  try {
    const response = await fetch(`http://localhost:3000/api/dich-vu/${id}`)
    return await response.json()
  } catch (error) {
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error',
    }
  }
}
// Update DichVu
export async function updateDichVu(
  id: string,
  data: Partial<Omit<DichVu, 'idDv'>>
): Promise<ApiResponse<DichVu>> {
  try {
    const response = await fetch(`http://localhost:3000/api/dich-vu/${id}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data),
    })
    return await response.json()
  } catch (error) {
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error',
    }
  }
}

// Delete DichVu
export async function deleteDichVu(id: string): Promise<ApiResponse<void>> {
  try {
    const response = await fetch(`http://localhost:3000/api/dich-vu/${id}`, {
      method: 'DELETE',
    })
    return await response.json()
  } catch (error) {
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error',
    }
  }
}

// Create new DichVu
export async function createDichVu(
  data: Omit<DichVu, 'idDv'>
): Promise<ApiResponse<DichVu>> {
  try {
    const response = await fetch(API_URL, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data),
    })
    return await response.json()
  } catch (error) {
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error',
    }
  }
}
